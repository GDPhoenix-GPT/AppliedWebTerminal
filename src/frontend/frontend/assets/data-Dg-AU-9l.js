import{d as l}from"./node-modules_pinia-CkAtAcEI.js";import{W as f}from"./core-DWdunkx_.js";import{L as a}from"./utils-BS2FQLbZ.js";function u(){return{language:"en_us",customLanguages:[]}}class m{constructor(e,t,s=window.localStorage){this.defaultValue=e,this.localStorageKey=t,this.store=s}get(){a.info(`LocalStorageManager getting ${this.localStorageKey}`);const e=this.store.getItem(this.localStorageKey);let t;return e?t=JSON.parse(e):(a.warn(`LocalStorageManager get ${this.localStorageKey} is empty, setting default.`),t=this.defaultValue(),this.set(t)),a.info(`LocalStorageManager got ${this.localStorageKey}:`),a.debug(t),t}set(e){a.info(`LocalStorageManager setting ${this.localStorageKey}:`),a.debug(e);const t=JSON.stringify(e);this.store.setItem(this.localStorageKey,t)}}function g(){return{localConfigStoreManager:new m(u,"LocalStorage"),webSocketService:new f,inTerminalPage:!1}}const v=l("appStorage",{state:()=>g()});function S(){return{title:"Applied Web Terminal"}}const h="/settings";function y(o,e=()=>{}){a.info("Fetching server config..."),fetch(h,{method:"GET",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json"}}).then(s=>{s.ok?s.json().then(r=>{a.info("Fetch ServerConfig.yaml Success :"),a.info(r),o(r)}):(a.warn("Fetch ServerConfig.yaml Error :"),a.warn(s.toString()),e(s))})}function p(){return{localConfig:g().localConfigStoreManager.get(),serverConfig:S()}}const T=l("appConfig",{state:()=>p()}),c=60*60*1e3,$=l("translate",{state:()=>({translations:new Map}),actions:{async getTranslation(o,e){const t=`${o}_${e}`,s=new Date().getTime();if(this.translations.has(t)&&s-this.translations.get(t).timestamp<c)return this.translations.get(t).value;const n=localStorage.getItem(t);if(n){const r=localStorage.getItem(`${t}_timestamp`);if(r&&s-Number(r)<c)return this.translations.set(t,{value:n,timestamp:Number(r)}),n}try{const r=await fetch(`/translate/${o}/${e}`);if(r.ok){const i=await r.text();return i!==e&&(this.translations.set(t,{value:i,timestamp:s}),localStorage.setItem(t,i),localStorage.setItem(`${t}_timestamp`,s.toString())),i}}catch(r){a.error("Could not find translate text"),a.error(r)}return e}}}),I=l("password",{state:()=>({passwords:new Map}),actions:{getPassword(o){const e=this.passwords.get(o);if(e)return e;const t=localStorage.getItem(`password/terminal/${o}`);if(t)return this.passwords.set(o,t),t},storePassword(o,e){this.passwords.set(o,e),localStorage.setItem(`password/terminal/${o}`,e)}}});export{v as a,$ as b,I as c,y as f,T as u};
